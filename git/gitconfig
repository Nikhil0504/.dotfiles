[user]
    name = Nikhil Garuda
    email = nikhilgaruda@live.com

[core]
    editor = vim
    excludesfile = ~/.gitignore_global
    autocrlf = input
    whitespace = trailing-space,space-before-tab
    pager = less -FRSX
    # Make `git rebase` safer on macOS
    trustctime = false

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[commit]
    # Template for commit messages
    template = ~/.gitmessage

[diff]
    # Detect copies as well as renames
    renames = copies

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out
    followTags = true

[pull]
    rebase = true

[fetch]
    prune = true

[rebase]
    autosquash = true

[alias]
    # View abbreviated SHA, description, and history graph
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # List aliases
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Remove branches that have already been merged with main/master
    # a.k.a. 'delete merged'
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # ===================
    # Astronomy Workflow Aliases
    # ===================
    
    # Quick commit for analysis updates
    analysis = "!git add -A && git commit -m 'Analysis update: $(date)'"
    
    # Save work in progress
    wip = "!git add -A && git commit -m 'WIP: $(git symbolic-ref --short HEAD)'"
    
    # Undo last commit but keep changes
    undo = reset HEAD~1 --mixed
    
    # Show files changed in last commit
    last = diff-tree --no-commit-id --name-only -r HEAD
    
    # Create a snapshot branch for current work
    snapshot = "!git checkout -b snapshot-$(date +%Y%m%d-%H%M%S)"
    
    # Show commit stats
    stats = shortlog -sn
    
    # Find large files in repo
    bigfiles = "!git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 --reverse | head -20"
    
    # ===================
    # Commit Message Helpers
    # ===================
    
    # Commit with specific types (follows conventional commits)
    cfeat = "!f() { git commit -m \"feat($1): $2\"; }; f"
    cfix = "!f() { git commit -m \"fix($1): $2\"; }; f"
    cdocs = "!f() { git commit -m \"docs($1): $2\"; }; f"
    cdata = "!f() { git commit -m \"data($1): $2\"; }; f"
    cscience = "!f() { git commit -m \"science($1): $2\"; }; f"
    cchore = "!f() { git commit -m \"chore($1): $2\"; }; f"
    
    # Quick commit for common astronomy tasks
    cphotometry = "!f() { git add -A && git commit -m \"feat(photometry): $1\"; }; f"
    cspectro = "!f() { git add -A && git commit -m \"feat(spectro): $1\"; }; f"
    cplot = "!f() { git add -A && git commit -m \"feat(plotting): $1\"; }; f"
    ccalib = "!f() { git add -A && git commit -m \"data(calib): $1\"; }; f"
    
    # Show commit message guidelines
    cmsg-help = "!cat ~/.gitmessage | head -100"

# Include local settings if they exist
[include]
    path = ~/.gitconfig.local
